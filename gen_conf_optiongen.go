// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package logbus

import (
	"os"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Conf should use NewConf to initialize it
type Conf struct {
	// log
	LogLevel       zapcore.Level
	Dev            bool   // false 输出json格式， true 则输出带颜色的易读log
	DefaultChannel string // 默认的dd_meta_channel
	DefaultTag     string // 默认打印的tag
	CallerSkip     int    // zap logger callerSkip
	//"LogId":         true,                            // 输出 log id  // 日志规范要求必须要有xid 不作为配置放出
	StackLogLevel zapcore.Level
	// stdout
	BufferedStdout bool
	// WriteSyncer
	WriteSyncer zapcore.WriteSyncer
	// monitor
	MonitorOutput MonitorOutput // [Logbus, Noop, Prometheus]
	// The Prometheus metrics will be made available on this port:
	DefaultPrometheusListenAddress string
	// This is the endpoint where the Prometheus metrics will be made available ("/metrics" is the default with Prometheus):
	DefaultPrometheusPath string
	// DefaultPercentiles is the default spread of percentiles/quantiles we maintain for timings / histogram metrics:
	DefaultPercentiles  []float64
	DefaultLabel        prometheus.Labels
	MonitorTimingMaxAge time.Duration
	// glog
	PrintAsError bool
}

// NewConf new Conf
func NewConf(opts ...ConfOption) *Conf {
	cc := newDefaultConf()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConf != nil {
		watchDogConf(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Conf) ApplyOption(opts ...ConfOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// ConfOption option func
type ConfOption func(cc *Conf)

// WithLogLevel 日志级别，默认 zap.DebugLevel
func WithLogLevel(v zapcore.Level) ConfOption {
	return func(cc *Conf) {
		cc.LogLevel = v
	}
}

// WithDev 是否输出带颜色的易读log，默认关闭
func WithDev(v bool) ConfOption {
	return func(cc *Conf) {
		cc.Dev = v
	}
}

// WithDefaultChannel 设置默认的dd_meta_channel
func WithDefaultChannel(v string) ConfOption {
	return func(cc *Conf) {
		cc.DefaultChannel = v
	}
}

// WithDefaultTag 设置默认的tag
func WithDefaultTag(v string) ConfOption {
	return func(cc *Conf) {
		cc.DefaultTag = v
	}
}

// WithCallerSkip 等于zap.CallerSkip
func WithCallerSkip(v int) ConfOption {
	return func(cc *Conf) {
		cc.CallerSkip = v
	}
}

// WithStackLogLevel 是否输出log_xid，默认开启,打印stack的最低级别，默认ErrorLevel stack if level >= StackLogLevel
func WithStackLogLevel(v zapcore.Level) ConfOption {
	return func(cc *Conf) {
		cc.StackLogLevel = v
	}
}

// WithBufferedStdout 输出stdout时使用 logbus.BufferedWriteSyncer
func WithBufferedStdout(v bool) ConfOption {
	return func(cc *Conf) {
		cc.BufferedStdout = v
	}
}

// WithWriteSyncer 输出日志的WriteSyncer，默认为os.Stdout
func WithWriteSyncer(v zapcore.WriteSyncer) ConfOption {
	return func(cc *Conf) {
		cc.WriteSyncer = v
	}
}

// WithMonitorOutput 监控输出 Logbus, Noop, Prometheus
func WithMonitorOutput(v MonitorOutput) ConfOption {
	return func(cc *Conf) {
		cc.MonitorOutput = v
	}
}

// WithDefaultPrometheusListenAddress prometheus监控输出端口，k8s集群保持默认9158端口
func WithDefaultPrometheusListenAddress(v string) ConfOption {
	return func(cc *Conf) {
		cc.DefaultPrometheusListenAddress = v
	}
}

// WithDefaultPrometheusPath prometheus监控输出接口path
func WithDefaultPrometheusPath(v string) ConfOption {
	return func(cc *Conf) {
		cc.DefaultPrometheusPath = v
	}
}

// WithDefaultPercentiles 监控统计耗时的分位值，默认统计耗时的 50%, 75%, 99%, 100% 的分位数
func WithDefaultPercentiles(v ...float64) ConfOption {
	return func(cc *Conf) {
		cc.DefaultPercentiles = v
	}
}

// WithDefaultLabel 监控额外添加的全局label，会在监控指标中显示
func WithDefaultLabel(v prometheus.Labels) ConfOption {
	return func(cc *Conf) {
		cc.DefaultLabel = v
	}
}

// WithMonitorTimingMaxAge monitor.Timing数据的最大生命周期
func WithMonitorTimingMaxAge(v time.Duration) ConfOption {
	return func(cc *Conf) {
		cc.MonitorTimingMaxAge = v
	}
}

// WithPrintAsError glog输出field带error时，将日志级别提升到error
func WithPrintAsError(v bool) ConfOption {
	return func(cc *Conf) {
		cc.PrintAsError = v
	}
}

// InstallConfWatchDog the installed func will called when NewConf  called
func InstallConfWatchDog(dog func(cc *Conf)) { watchDogConf = dog }

// watchDogConf global watch dog
var watchDogConf func(cc *Conf)

// newDefaultConf new default Conf
func newDefaultConf() *Conf {
	cc := &Conf{}

	for _, opt := range [...]ConfOption{
		WithLogLevel(zap.DebugLevel),
		WithDev(false),
		WithDefaultChannel(SERVERLOG),
		WithDefaultTag(DefaultTag),
		WithCallerSkip(2),
		WithStackLogLevel(zap.ErrorLevel),
		WithBufferedStdout(false),
		WithWriteSyncer(os.Stdout),
		WithMonitorOutput(Noop),
		WithDefaultPrometheusListenAddress(":9158"),
		WithDefaultPrometheusPath("/metrics"),
		WithDefaultPercentiles([]float64{0.5, 0.75, 0.99, 1}...),
		WithDefaultLabel(map[string]string{}),
		WithMonitorTimingMaxAge(time.Minute),
		WithPrintAsError(true),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Conf) GetLogLevel() zapcore.Level                { return cc.LogLevel }
func (cc *Conf) GetDev() bool                              { return cc.Dev }
func (cc *Conf) GetDefaultChannel() string                 { return cc.DefaultChannel }
func (cc *Conf) GetDefaultTag() string                     { return cc.DefaultTag }
func (cc *Conf) GetCallerSkip() int                        { return cc.CallerSkip }
func (cc *Conf) GetStackLogLevel() zapcore.Level           { return cc.StackLogLevel }
func (cc *Conf) GetBufferedStdout() bool                   { return cc.BufferedStdout }
func (cc *Conf) GetWriteSyncer() zapcore.WriteSyncer       { return cc.WriteSyncer }
func (cc *Conf) GetMonitorOutput() MonitorOutput           { return cc.MonitorOutput }
func (cc *Conf) GetDefaultPrometheusListenAddress() string { return cc.DefaultPrometheusListenAddress }
func (cc *Conf) GetDefaultPrometheusPath() string          { return cc.DefaultPrometheusPath }
func (cc *Conf) GetDefaultPercentiles() []float64          { return cc.DefaultPercentiles }
func (cc *Conf) GetDefaultLabel() prometheus.Labels        { return cc.DefaultLabel }
func (cc *Conf) GetMonitorTimingMaxAge() time.Duration     { return cc.MonitorTimingMaxAge }
func (cc *Conf) GetPrintAsError() bool                     { return cc.PrintAsError }

// ConfVisitor visitor interface for Conf
type ConfVisitor interface {
	GetLogLevel() zapcore.Level
	GetDev() bool
	GetDefaultChannel() string
	GetDefaultTag() string
	GetCallerSkip() int
	GetStackLogLevel() zapcore.Level
	GetBufferedStdout() bool
	GetWriteSyncer() zapcore.WriteSyncer
	GetMonitorOutput() MonitorOutput
	GetDefaultPrometheusListenAddress() string
	GetDefaultPrometheusPath() string
	GetDefaultPercentiles() []float64
	GetDefaultLabel() prometheus.Labels
	GetMonitorTimingMaxAge() time.Duration
	GetPrintAsError() bool
}

// ConfInterface visitor + ApplyOption interface for Conf
type ConfInterface interface {
	ConfVisitor
	ApplyOption(...ConfOption)
}
